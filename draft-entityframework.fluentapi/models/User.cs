namespace draft_entityframework.fluentapi.models
{
    public sealed class User
    {
        public Guid UserID { get; set; }

        public required string Name { get; set; }

        /// <summary>
        /// Связь один-к-одному с пользователем.
        /// <br/><br/>
        /// У пользователя может быть только одна ссылка на пользовательские данные
        /// и у пользовательских данных может быть только одна ссылка на пользователя.
        /// <br/><br/>
        /// Пользователь - главная сущность. Она не хранит ссылку (внешний ключ) на пользовательские данные
        /// </summary>
        public required UserData UserData { get; set; } // Навигационное свойство

        /// <summary>
        /// Связь многие-ко-многим со созданными играми.
        /// <br/><br/>
        /// У пользователя может быть много созданных игр
        /// и у игры может быть много разработчиков (пользователей).
        /// <br/><br/>
        /// Созданные игры - это ссылка на игры
        /// </summary>
        public List<Game> CreatedGames { get; set; } = new List<Game>(); // Навигационное свойство
        /// <summary>
        /// Кастомная таблица для связи многие-ко-многим у игры с пользователем
        /// </summary>
        public List<DevelopersGames> DevelopersGames { get; set; } = new List<DevelopersGames>(); // Навигационное свойство

        /// <summary>
        /// Связь многие-ко-многим с изданными играми.
        /// <br/><br/>
        /// У пользователя может быть много изданных игр
        /// и у игры может быть много издательств (пользователей).
        /// <br/><br/>
        /// Изданные игры - это ссылка на игры
        /// </summary>
        public List<Game> PublishedGames { get; set; } = new List<Game>(); // Навигационное свойство
        /// <summary>
        /// Кастомная таблица для связи многие-ко-многим у игры с пользователем
        /// </summary>
        public List<PublishersGames> PublishersGames { get; set; } = new List<PublishersGames>(); // Навигационное свойство

        /// <summary>
        /// Связь один-ко-многим с отзывами.
        /// <br/><br/>
        /// У пользователя может быть много отзывов,
        /// но у отзыва может быть только один пользователь.
        /// <br/><br/>
        /// Так как у пользователя может быть много отзывов, значит он не хранит внешний ключ (ссылку) на отзывы,
        /// а имеет только навигационное свойство
        /// </summary>
        public List<Review> Reviews { get; set; } = new List<Review>(); // Навигационное свойство
    }
}